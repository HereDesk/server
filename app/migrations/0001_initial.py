# Generated by Django 2.0 on 2018-09-12 07:41

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BlacklistIp',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('black_uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('ip', models.CharField(max_length=30)),
                ('remark', models.CharField(blank=True, max_length=100, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_column='create_time')),
            ],
            options={
                'db_table': 't_blacklist_ip',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Authentication',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(default=None, max_length=200, verbose_name='token')),
            ],
            options={
                'db_table': 't_authentication',
            },
        ),
        migrations.CreateModel(
            name='Bug',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('bug_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=100, verbose_name='Bug标题')),
                ('steps', models.CharField(max_length=1000, verbose_name='步骤')),
                ('reality_result', models.CharField(max_length=500, verbose_name='实际结果')),
                ('expected_result', models.CharField(max_length=500, verbose_name='预期')),
                ('remark', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('assignedTo_time', models.DateTimeField(auto_now_add=True, verbose_name='分配时间')),
                ('fixed_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='解决时间')),
                ('closed_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='关闭时间')),
                ('hangUp_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='挂起时间')),
                ('isDelete', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否删除')),
                ('delete_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='删除时间')),
                ('last_Time', models.DateTimeField(auto_now=True, verbose_name='最后一次操作时间')),
            ],
            options={
                'db_table': 't_bug',
            },
        ),
        migrations.CreateModel(
            name='BugAnnex',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=100, verbose_name='路径')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('isDelete', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否删除')),
                ('bug_id', models.ForeignKey(db_column='bug_id', on_delete=django.db.models.deletion.CASCADE, to='app.Bug', to_field='bug_id')),
            ],
            options={
                'db_table': 't_bug_annex',
            },
        ),
        migrations.CreateModel(
            name='BugHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('desc', models.CharField(max_length=1000, verbose_name='说明')),
                ('remark', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('bug_id', models.ForeignKey(db_column='bug_id', on_delete=django.db.models.deletion.CASCADE, to='app.Bug', to_field='bug_id')),
            ],
            options={
                'db_table': 't_bug_history',
            },
        ),
        migrations.CreateModel(
            name='BugPriority',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=15, unique=True, verbose_name='bug优先级')),
                ('name', models.CharField(max_length=20, verbose_name='bug优先级说明')),
            ],
            options={
                'db_table': 't_bug_priority',
            },
        ),
        migrations.CreateModel(
            name='BugReport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('content', models.TextField(max_length=100000)),
            ],
            options={
                'db_table': 't_bug_report',
            },
        ),
        migrations.CreateModel(
            name='BugSeverity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=15, unique=True, verbose_name='bug严重程度')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='bug严重程度说明')),
            ],
            options={
                'db_table': 't_bug_severity',
            },
        ),
        migrations.CreateModel(
            name='BugSolution',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=15, unique=True, verbose_name='bug修复方案')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='bug严重程度说明')),
            ],
            options={
                'db_table': 't_bug_solution',
            },
        ),
        migrations.CreateModel(
            name='BugStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=15, unique=True, verbose_name='bug状态')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='bug状态说明')),
            ],
            options={
                'db_table': 't_bug_status',
            },
        ),
        migrations.CreateModel(
            name='BugType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=10, unique=True, verbose_name='bug类型')),
                ('name', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='bug状态说明')),
            ],
            options={
                'db_table': 't_bug_type',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group', models.CharField(max_length=20, unique=True, verbose_name='group')),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'db_table': 't_group',
            },
        ),
        migrations.CreateModel(
            name='KeywordFilter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.CharField(max_length=30, verbose_name='关键字')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 't_keyword_filter',
            },
        ),
        migrations.CreateModel(
            name='LoggedLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ip', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='ip')),
                ('path', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='path')),
                ('method', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='method')),
                ('request', models.CharField(blank=True, default=None, max_length=10000, null=True, verbose_name='请求内容')),
                ('platform', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='平台')),
                ('browser', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='浏览器')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'db_table': 't_logged_log',
            },
        ),
        migrations.CreateModel(
            name='ModuleA',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('m1', models.CharField(max_length=200, verbose_name='模块名称')),
                ('isChange', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否有修改')),
                ('isDelete', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否删除')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('change_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='修改时间')),
                ('delete_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='删除时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_module_1',
            },
        ),
        migrations.CreateModel(
            name='ModuleB',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('m2', models.CharField(max_length=200, verbose_name='模块名称')),
                ('isChange', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否有修改')),
                ('isDelete', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否删除')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('change_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='修改时间')),
                ('delete_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='删除时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_module_2',
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='权限名称')),
                ('code', models.CharField(max_length=200, unique=True, verbose_name='权限code')),
                ('url', models.CharField(max_length=200)),
                ('flag', models.CharField(max_length=200, verbose_name='标记')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'db_table': 't_permissions',
            },
        ),
        migrations.CreateModel(
            name='PermissionsGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_allow', models.IntegerField(choices=[('-1', '不允许'), ('1', '允许')], default=1)),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('group', models.ForeignKey(db_column='group', on_delete=django.db.models.deletion.CASCADE, to='app.Group', to_field='group')),
                ('permissions_id', models.ForeignKey(db_column='permissions_id', on_delete=django.db.models.deletion.CASCADE, to='app.Permissions')),
            ],
            options={
                'db_table': 't_permissions_group',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=50, verbose_name='产品名称')),
                ('product_code', models.CharField(max_length=20, unique=True, verbose_name='产品编号')),
                ('status', models.IntegerField(default=0, verbose_name='状态')),
                ('remark', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='备忘')),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='开始日期')),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='结束日期')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_product',
            },
        ),
        migrations.CreateModel(
            name='ProductMembers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[('0', '启用'), ('1', '禁用')], default=0, verbose_name='状态')),
                ('join_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('banned_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='禁止时间')),
            ],
            options={
                'db_table': 't_product_members',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=20, verbose_name='版本记录')),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='开始日期')),
                ('online_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='预计上线时间')),
                ('practicalnline_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='实际上线时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_release',
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=20, verbose_name='code')),
                ('code_value', models.IntegerField(verbose_name='code值')),
                ('code_desc', models.CharField(max_length=100, verbose_name='描述')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'db_table': 't_system_config',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('case_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('category', models.CharField(max_length=20, verbose_name='用例分类')),
                ('title', models.TextField(max_length=500, verbose_name='用例名称')),
                ('precondition', models.CharField(blank=True, default=None, max_length=500, null=True, verbose_name='前置条件')),
                ('DataInput', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='数据输入')),
                ('steps', models.TextField(max_length=1000, verbose_name='操作步骤')),
                ('expected_result', models.TextField(max_length=500, verbose_name='预期结果')),
                ('priority', models.CharField(blank=True, default=None, max_length=10, null=True, verbose_name='优先级:P1,P2,P3')),
                ('remark', models.TextField(max_length=1000, verbose_name='备注')),
                ('isChange', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否变更')),
                ('isDelete', models.IntegerField(choices=[('0', '否'), ('1', '是')], default=0, verbose_name='是否删除')),
                ('isReview', models.IntegerField(choices=[('0', '未评审'), ('1', '评审不通过'), ('2', '评审通过')], default=0, verbose_name='是否评审')),
                ('status', models.IntegerField(choices=[('0', '有效'), ('1', '无效')], default=0, verbose_name='状态')),
                ('fall_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='失效时间')),
                ('change_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='变更时间')),
                ('delete_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='删除时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_testcase',
            },
        ),
        migrations.CreateModel(
            name='TestCaseReview',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result', models.IntegerField(choices=[('0', '评审未通过'), ('1', '评审通过')], default=0, verbose_name='是否评审')),
                ('remark', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='评审意见')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('case_id', models.ForeignKey(db_column='case_id', on_delete=django.db.models.deletion.CASCADE, to='app.TestCase', to_field='case_id')),
            ],
            options={
                'db_table': 't_testcase_review',
            },
        ),
        migrations.CreateModel(
            name='TestSuite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('suite_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('suite_name', models.CharField(max_length=30, verbose_name='名称')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 't_testsuite',
            },
        ),
        migrations.CreateModel(
            name='TestSuiteCell',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cell_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('result', models.IntegerField(choices=[('0', '未执行'), ('1', '成功'), ('-1', '失败')], default=0, verbose_name='结果')),
                ('run_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='运行时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('case_id', models.ForeignKey(db_column='case_id', on_delete=django.db.models.deletion.CASCADE, to='app.TestCase', to_field='case_id')),
            ],
            options={
                'db_table': 't_testsuite_cell',
            },
        ),
        migrations.CreateModel(
            name='UploadImage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('annex', models.ImageField(default='', max_length=255, upload_to='annex/', verbose_name='annex')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'db_table': 't_upload_image',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Email')),
                ('password', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='Password')),
                ('mobile', models.CharField(blank=True, default=None, max_length=11, null=True, verbose_name='手机号')),
                ('user_status', models.IntegerField(choices=[('1', '正常'), ('2', '封禁')], verbose_name='用户状态')),
                ('realname', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='昵称')),
                ('position', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='职位')),
                ('gender', models.IntegerField(default='0', help_text='性别 0：未知、1：男、2：女', verbose_name='性别')),
                ('avatarUrl', models.CharField(blank=True, default=None, max_length=300, null=True, verbose_name='头像')),
                ('province', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='省份')),
                ('city', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='城市')),
                ('source', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='来源')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('group', models.ForeignKey(db_column='group', on_delete=django.db.models.deletion.CASCADE, to='app.Group', to_field='group')),
            ],
            options={
                'db_table': 't_user',
            },
        ),
        migrations.AddField(
            model_name='testsuitecell',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='cell_creator_id', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testsuitecell',
            name='runner_id',
            field=models.ForeignKey(db_column='runner_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cell_runner_id', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testsuitecell',
            name='suite_id',
            field=models.ForeignKey(db_column='suite_id', on_delete=django.db.models.deletion.CASCADE, to='app.TestSuite', to_field='suite_id'),
        ),
        migrations.AddField(
            model_name='testsuite',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testsuite',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='testcasereview',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='changer_id',
            field=models.ForeignKey(db_column='changer_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='case_changer', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='case_creator', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='deleter_id',
            field=models.ForeignKey(db_column='deleter_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='case_deleter', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='faller_id',
            field=models.ForeignKey(db_column='faller_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='case_faller', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='m1_id',
            field=models.ForeignKey(db_column='m1_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.ModuleA'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='m2_id',
            field=models.ForeignKey(db_column='m2_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.ModuleB'),
        ),
        migrations.AddField(
            model_name='testcase',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='release',
            name='changer_id',
            field=models.ForeignKey(db_column='changer_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='release_changer', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='release',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='release_creator', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='release',
            name='deleter_id',
            field=models.ForeignKey(db_column='deleter_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='release_deleter', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='release',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='productmembers',
            name='member_id',
            field=models.ForeignKey(db_column='member_id', on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='productmembers',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='product',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='product',
            name='principal',
            field=models.ForeignKey(db_column='principal', on_delete=django.db.models.deletion.CASCADE, related_name='principal', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='moduleb',
            name='changer_id',
            field=models.ForeignKey(db_column='changer_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='module_b_changer', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='moduleb',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='module_b_creator', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='moduleb',
            name='deleter_id',
            field=models.ForeignKey(db_column='deleter_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='module_b_deleter', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='moduleb',
            name='m1_id',
            field=models.ForeignKey(db_column='ModuleA_ID', on_delete=django.db.models.deletion.CASCADE, to='app.ModuleA'),
        ),
        migrations.AddField(
            model_name='modulea',
            name='changer_id',
            field=models.ForeignKey(db_column='changer_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='module_changer', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='modulea',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='module_creator', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='modulea',
            name='deleter_id',
            field=models.ForeignKey(db_column='deleter_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='module_deleter', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='modulea',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='loggedlog',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bughistory',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='assignedTo_id',
            field=models.ForeignKey(db_column='assignedTo_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignedTo', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='bug_type',
            field=models.ForeignKey(db_column='bug_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bug_type_key', to='app.BugType', to_field='key'),
        ),
        migrations.AddField(
            model_name='bug',
            name='case_id',
            field=models.ForeignKey(db_column='case_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.TestCase', to_field='case_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='cell_id',
            field=models.ForeignKey(db_column='cell_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suite_cell_id', to='app.TestSuiteCell', to_field='cell_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='closed_id',
            field=models.ForeignKey(db_column='closed_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closedBy', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='creator_id',
            field=models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, related_name='openedBy', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='delete_id',
            field=models.ForeignKey(db_column='delete_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='DeleteBy', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='fixed_id',
            field=models.ForeignKey(db_column='fixed_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resolvedBy', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='hangUp_id',
            field=models.ForeignKey(db_column='hangUp_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hangUpBy', to='app.User', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='bug',
            name='m1_id',
            field=models.ForeignKey(db_column='m1_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.ModuleA'),
        ),
        migrations.AddField(
            model_name='bug',
            name='m2_id',
            field=models.ForeignKey(db_column='m2_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.ModuleB'),
        ),
        migrations.AddField(
            model_name='bug',
            name='priority',
            field=models.ForeignKey(db_column='priority', on_delete=django.db.models.deletion.CASCADE, to='app.BugPriority', to_field='key'),
        ),
        migrations.AddField(
            model_name='bug',
            name='product_code',
            field=models.ForeignKey(db_column='product_code', on_delete=django.db.models.deletion.CASCADE, related_name='bug_product_code', to='app.Product', to_field='product_code'),
        ),
        migrations.AddField(
            model_name='bug',
            name='severity',
            field=models.ForeignKey(db_column='severity', on_delete=django.db.models.deletion.CASCADE, to='app.BugSeverity', to_field='key'),
        ),
        migrations.AddField(
            model_name='bug',
            name='solution',
            field=models.ForeignKey(db_column='solution', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.BugSolution', to_field='key'),
        ),
        migrations.AddField(
            model_name='bug',
            name='status',
            field=models.ForeignKey(db_column='status', default='Open', on_delete=django.db.models.deletion.CASCADE, to='app.BugStatus', to_field='key'),
        ),
        migrations.AddField(
            model_name='bug',
            name='version_id',
            field=models.ForeignKey(db_column='versionId', on_delete=django.db.models.deletion.CASCADE, to='app.Release'),
        ),
        migrations.AddField(
            model_name='authentication',
            name='uid',
            field=models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.CASCADE, to='app.User', to_field='user_id'),
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('email', 'realname')},
        ),
    ]
